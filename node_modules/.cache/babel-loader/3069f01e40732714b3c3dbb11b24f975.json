{"ast":null,"code":"import _regeneratorRuntime from \"/Users/nathan/Sites/giglist-v2-vue/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/nathan/Sites/giglist-v2-vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/web.btoa.js\";\nimport \"core-js/modules/web.dom-exception.constructor.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/web.dom-exception.to-string-tag.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport cityData from \"../data/songkickCityData.js\";\nexport default {\n  name: 'App',\n  data: function data() {\n    return {\n      selected: 7644,\n      cities: cityData,\n      songkickData: [],\n      spotifyToken: '',\n      spotifyEmbedUrl: '',\n      randomGigVenue: '',\n      randomGigUrl: '',\n      randomGigDayOfWeek: '',\n      randomGigMonth: '',\n      randomGigDay: '',\n      randomGigArtist: ''\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var clientId, clientSecret, result, data;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // The first step in getting data from Spotify API is to do a POST request with our client ID and secret to get an access token in response (From this tutorial: https://www.youtube.com/watch?v=SbelQW2JaDQ)    \n              // The below private method returns a promise (as denoted by 'async'); we store the endpoint response in variable 'result' \n              clientId = '5478fc8855ee4fcaa624bbb2053924e9';\n              clientSecret = 'db24d93b5c434ce0a22680c6252f40ab';\n              _context.next = 4;\n              return fetch('https://accounts.spotify.com/api/token', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/x-www-form-urlencoded',\n                  'Authorization': 'Basic ' + btoa(clientId + ':' + clientSecret)\n                },\n                body: 'grant_type=client_credentials'\n              });\n\n            case 4:\n              result = _context.sent;\n              _context.next = 7;\n              return result.json();\n\n            case 7:\n              data = _context.sent;\n              _this.spotifyToken = data.access_token; // Also, show a default result on page load\n\n              _this.getCityData(_this.selected);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  methods: {\n    getCityData: function getCityData(defaultCityId, e) {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var songkickCityId, songkickUrl, responseJSON, CACHE_MAX_AGE, cachedResultJSON, cachedResult, response, dataToCache;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // Store city ID from selected <option> value in a variable; use defaultCityId on page load only\n                songkickCityId = defaultCityId ? _this2.selected : e.target.value; // Using the getSongkickUrl method, generate a URL using the ID and date from above\n\n                songkickUrl = _this2.getSongkickUrl(songkickCityId);\n                CACHE_MAX_AGE = 24 * 60 * 60 * 1000; // 24 hrs in ms\n\n                cachedResultJSON = localStorage.getItem(\"cache-\".concat(songkickCityId));\n                cachedResult = JSON.parse(cachedResultJSON);\n\n                if (!cachedResultJSON) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                // If data is cached, set responseJSON as data from cache\n                responseJSON = cachedResult.responseJSON;\n                _context2.next = 17;\n                break;\n\n              case 9:\n                _context2.next = 11;\n                return fetch(songkickUrl);\n\n              case 11:\n                response = _context2.sent;\n                _context2.next = 14;\n                return response.json();\n\n              case 14:\n                responseJSON = _context2.sent;\n                dataToCache = {\n                  createdAt: Date.now(),\n                  responseJSON: responseJSON\n                };\n                localStorage.setItem(\"cache-\".concat(songkickCityId), JSON.stringify(dataToCache));\n\n              case 17:\n                _this2.songkickData = responseJSON;\n\n                _this2.getRandomGigData();\n\n              case 19:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    getSongkickUrl: function getSongkickUrl(songkickCityId) {\n      var now = new Date();\n      var today = now.toISOString().slice(0, 10);\n      var songkickAPIKey = 'RpuYqxFiPPsJPs5l';\n      var songkickUrl = \"https://api.songkick.com/api/3.0/metro_areas/\".concat(songkickCityId, \"/calendar.json?min_date=\").concat(today, \"&apikey=\").concat(songkickAPIKey);\n      return songkickUrl;\n    },\n    getRandomGigData: function getRandomGigData() {\n      var listOfGigs = this.songkickData.resultsPage.results.event;\n      var randomGig = listOfGigs[Math.floor(Math.random() * listOfGigs.length)];\n      var randomGigDate = new Date(randomGig.start.datetime);\n      this.randomGigVenue = randomGig.venue.displayName;\n      this.randomGigUrl = randomGig.uri;\n      this.randomGigDayOfWeek = randomGigDate.toLocaleString('default', {\n        weekday: 'long'\n      });\n      this.randomGigMonth = randomGigDate.toLocaleString('default', {\n        month: 'long'\n      });\n      this.randomGigDay = randomGigDate.getDate();\n      this.randomGigArtist = randomGig.performance[0].artist.displayName;\n      this.getSpotifyEmbedUrl(this.spotifyToken, this.randomGigArtist);\n    },\n    getSpotifyEmbedUrl: function getSpotifyEmbedUrl(token, artistName) {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var artistResult, spotifyData, spotifyArtistId;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return fetch(\"https://api.spotify.com/v1/search?q=\".concat(artistName, \"&type=artist&limit=1\"), {\n                  method: 'GET',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json',\n                    'Authorization': 'Bearer ' + token\n                  }\n                });\n\n              case 2:\n                artistResult = _context3.sent;\n                _context3.next = 5;\n                return artistResult.json();\n\n              case 5:\n                spotifyData = _context3.sent;\n                spotifyArtistId = spotifyData.artists.items[0].id;\n                _this3.spotifyEmbedUrl = \"https://open.spotify.com/embed/artist/\".concat(spotifyArtistId);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["cityData","name","data","selected","cities","songkickData","spotifyToken","spotifyEmbedUrl","randomGigVenue","randomGigUrl","randomGigDayOfWeek","randomGigMonth","randomGigDay","randomGigArtist","created","clientId","clientSecret","fetch","method","headers","btoa","body","result","json","access_token","getCityData","methods","defaultCityId","e","songkickCityId","target","value","songkickUrl","getSongkickUrl","CACHE_MAX_AGE","cachedResultJSON","localStorage","getItem","cachedResult","JSON","parse","responseJSON","response","dataToCache","createdAt","Date","now","setItem","stringify","getRandomGigData","today","toISOString","slice","songkickAPIKey","listOfGigs","resultsPage","results","event","randomGig","Math","floor","random","length","randomGigDate","start","datetime","venue","displayName","uri","toLocaleString","weekday","month","getDate","performance","artist","getSpotifyEmbedUrl","token","artistName","artistResult","spotifyData","spotifyArtistId","artists","items","id"],"sourceRoot":"","sources":["/Users/nathan/Sites/giglist-v2-vue/src/views/HomeView.vue"],"sourcesContent":["<template>\n  <main className=\"max-w-xl m-auto px-4 md:px-8 mt-12 md:mt-24\">\n    <div className=\"mb-16 text-center\">\n      <div className=\"inline-block m-auto\">\n        <h1 className=\"text-3xl sm:text-4xl inline mr-3\">Find a concert in</h1>\n        <div className=\"city-select relative inline flex items-center\">\n          <select\n            className=\"bg-gray-600 hover:bg-gray-700 text-2xl sm:text-3xl py-2 px-3 mt-2 font-light rounded-sm border-gray-600 hover:border-gray-700 cursor-pointer\"\n            v-model=\"selected\" @change=\"getCityData\">\n            <option v-for=\"city in cities\" :key=\"city.id\" :value=\"city.id\">{{ city.label }}</option>\n          </select>\n          <span className=\"-ml-10 pt-2 text-2xl pointer-events-none\">\n            <font-awesome-icon icon=\"angle-down\" />\n          </span>\n        </div>\n      </div>\n    </div>\n\n    <div className=\"results relative p-6 text-xl\">\n      <p>\n        <a className=\"no-underline hover:underline inline-block decoration-1\" :href=\"randomGigUrl\"><strong>{{\n        randomGigArtist }}</strong> is playing on\n          <br /><strong>{{ randomGigDayOfWeek }}, {{ randomGigMonth }} {{ randomGigDay }}</strong> at\n          {{ randomGigVenue }}&nbsp;→\n        </a>\n      </p>\n\n      <iframe className=\"mt-6 w-full\" :src=\"spotifyEmbedUrl\" v-if=\"spotifyEmbedUrl\" width=\"100%\" height=\"80\"\n        frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\n    </div>\n\n    <div className=\"block text-center p-4\">\n      <button className=\"hover:underline\" @click=\"getCityData\">\n        <font-awesome-icon icon=\"repeat\" className=\"pr-2\" /> Get Another\n      </button>\n    </div>\n  </main>\n</template>\n\n<script>\n\nimport cityData from \"../data/songkickCityData.js\"\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      selected: 7644,\n      cities: cityData,\n      songkickData: [],      \n      spotifyToken: '',\n      spotifyEmbedUrl: '',\n      randomGigVenue: '',\n      randomGigUrl: '',\n      randomGigDayOfWeek: '',\n      randomGigMonth: '',\n      randomGigDay: '',\n      randomGigArtist: ''\n    }\n  },\n  async created(){\n    \n    // The first step in getting data from Spotify API is to do a POST request with our client ID and secret to get an access token in response (From this tutorial: https://www.youtube.com/watch?v=SbelQW2JaDQ)    \n    // The below private method returns a promise (as denoted by 'async'); we store the endpoint response in variable 'result' \n    const clientId = '5478fc8855ee4fcaa624bbb2053924e9'\n    const clientSecret = 'db24d93b5c434ce0a22680c6252f40ab'\n    const result = await fetch('https://accounts.spotify.com/api/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Basic ' + btoa(clientId + ':' + clientSecret)\n      },\n      body: 'grant_type=client_credentials'\n    });\n\n    // We await the json result from above and store it in variable 'data' and specifically return the access_token from the json data\n    // We'll use this token to call Spotify API endpoint below\n    const data = await result.json()\n    this.spotifyToken = data.access_token;   \n\n    // Also, show a default result on page load\n    this.getCityData(this.selected)    \n  },  \n  methods: {\n    async getCityData(defaultCityId, e) {\n\n      // Store city ID from selected <option> value in a variable; use defaultCityId on page load only\n      const songkickCityId = defaultCityId ? this.selected : e.target.value\n      \n      // Using the getSongkickUrl method, generate a URL using the ID and date from above\n      const songkickUrl = this.getSongkickUrl(songkickCityId) \n      let responseJSON  \n      const CACHE_MAX_AGE = 24 * 60 * 60 * 1000 // 24 hrs in ms\n      const cachedResultJSON = localStorage.getItem(`cache-${songkickCityId}`)\n      const cachedResult = JSON.parse(cachedResultJSON)      \n\n      if (cachedResultJSON) {\n        // If data is cached, set responseJSON as data from cache\n        responseJSON = cachedResult.responseJSON        \n        \n      } else {\n        // If data not cached, fetch it from the URL generated above and extract it as a JSON object; \n        // Also, store response in songkickData array defined above in data()\n        // Note: I'm using await/async instead of .then() chains, I think because it's cleaner and easier to read but not entirely sure...\n        const response = await fetch(songkickUrl)\n        responseJSON = await response.json()\n\n        const dataToCache = {\n          createdAt: Date.now(),\n          responseJSON\n        }                        \n        localStorage.setItem(`cache-${songkickCityId}`, JSON.stringify(dataToCache))                         \n      }                \n\n      this.songkickData = responseJSON  \n      this.getRandomGigData()\n    },\n    getSongkickUrl(songkickCityId) {\n      const now = new Date()\n      const today = now.toISOString().slice(0, 10)\n      const songkickAPIKey = 'RpuYqxFiPPsJPs5l'\n      let songkickUrl = `https://api.songkick.com/api/3.0/metro_areas/${songkickCityId}/calendar.json?min_date=${today}&apikey=${songkickAPIKey}`;\n      \n      return songkickUrl\n    },\n    getRandomGigData() {      \n      const listOfGigs = this.songkickData.resultsPage.results.event\n      const randomGig = listOfGigs[Math.floor(Math.random()*listOfGigs.length)];\n      const randomGigDate = new Date(randomGig.start.datetime);\n      this.randomGigVenue = randomGig.venue.displayName;\n      this.randomGigUrl = randomGig.uri;      \n      this.randomGigDayOfWeek = randomGigDate.toLocaleString('default', { weekday: 'long' });\n      this.randomGigMonth = randomGigDate.toLocaleString('default', { month: 'long' });\n      this.randomGigDay = randomGigDate.getDate();\n      this.randomGigArtist = randomGig.performance[0].artist.displayName;      \n      \n      this.getSpotifyEmbedUrl(this.spotifyToken, this.randomGigArtist)\n    },\n\n    async getSpotifyEmbedUrl(token, artistName) {\n      const artistResult = await fetch(`https://api.spotify.com/v1/search?q=${artistName}&type=artist&limit=1`, {\n        method: 'GET',\n        headers: { \n\t\t\t\t  'Content-Type': 'application/json',\n          'Accept': 'application/json',          \n          'Authorization': 'Bearer ' + token \n        }  \n      });\n      const spotifyData = await artistResult.json()\n      const spotifyArtistId = spotifyData.artists.items[0].id     \n      this.spotifyEmbedUrl = `https://open.spotify.com/embed/artist/${spotifyArtistId}`\n    }\n  }\n}\n</script>  \n\n"]},"metadata":{},"sourceType":"module"}