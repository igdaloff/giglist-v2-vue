{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, Fragment as _Fragment } from \"vue\";\nvar _hoisted_1 = {\n  className: \"results relative p-6 text-xl\"\n};\nvar _hoisted_2 = [\"href\"];\n\nvar _hoisted_3 = /*#__PURE__*/_createTextVNode(\" is playing on \");\n\nvar _hoisted_4 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nvar _hoisted_5 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_CitySelect = _resolveComponent(\"CitySelect\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_CitySelect, {\n    onChange: \"getCityData\"\n  }), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"p\", null, [_createElementVNode(\"a\", {\n    className: \"no-underline hover:underline inline-block decoration-1\",\n    href: $data.randomGigUrl\n  }, [_createElementVNode(\"strong\", null, _toDisplayString($data.randomGigArtist), 1\n  /* TEXT */\n  ), _hoisted_3, _hoisted_4, _createElementVNode(\"strong\", null, _toDisplayString($data.randomGigDayOfWeek) + \", \" + _toDisplayString($data.randomGigMonth) + \" \" + _toDisplayString($data.randomGigDay), 1\n  /* TEXT */\n  ), _createTextVNode(\" at \" + _toDisplayString($data.randomGigVenue) + \" → \", 1\n  /* TEXT */\n  )], 8\n  /* PROPS */\n  , _hoisted_2)]), $data.spotifyEmbedUrl ? (_openBlock(), _createElementBlock(\"iframe\", {\n    key: 0,\n    className: \"mt-6 w-full\",\n    src: $data.spotifyEmbedUrl,\n    width: \"100%\",\n    height: \"80\",\n    frameBorder: \"0\",\n    allowtransparency: \"true\",\n    allow: \"encrypted-media\"\n  }, null, 8\n  /* PROPS */\n  , _hoisted_5)) : _createCommentVNode(\"v-if\", true)])], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;EAMOA,SAAS,EAAC;;;;+CAGoB;;8BAC7BC,oBAAM,IAAN,EAAM,IAAN,EAAM,IAAN,EAAM;AAAA;AAAN;;;;;;6DARNC,aAEEC,qBAFF,EAEE;IADAC,QAAQ,EAAC;EACT,CAFF,GAIAH,oBAWM,KAXN,cAWM,CAVJA,oBAMI,GANJ,EAMI,IANJ,EAMI,CALFA,oBAII,GAJJ,EAII;IAJDD,SAAS,EAAC,wDAIT;IAJmEK,IAAI,EAAEC;EAIzE,CAJJ,GAA2FL,oBAC5D,QAD4D,EAC5D,IAD4D,EAC5DM,iBAA3BD,qBAA2B,CAD4D,EACxE;EAAA;EADwE,eAEzFE,YAAMP,oBAAkF,QAAlF,EAAkF,IAAlF,EAAkFM,iBAAvED,wBAAuE,IAAlD,IAAkD,GAAhDC,iBAAGD,oBAAH,CAAgD,GAA5B,GAA4B,GAA3BC,iBAAGD,kBAAH,CAAvD,EAAsE;EAAA;EAAtE,oBAAkF,SACxFC,iBAAGD,oBAAH,CADwF,GACpE,OACtB;EAAA;IAJA;;EAAA,aAKE,CANJ,CAUI,EAFyDA,uCAA7DG,oBAC4E,QAD5E,EAC4E;UAAA;IADpET,SAAS,EAAC,aAC0D;IAD3CU,GAAG,EAAEJ,qBACsC;IADEK,KAAK,EAAC,MACR;IADeC,MAAM,EAAC,IACtB;IAA1EC,WAAW,EAAC,GAA8D;IAA1DC,iBAAiB,EAAC,MAAwC;IAAjCC,KAAK,EAAC;EAA2B,CAD5E;;EAAA,kDAEI,CAXN","names":["className","_createElementVNode","_createVNode","_component_CitySelect","onChange","href","$data","_toDisplayString","_hoisted_4","_createElementBlock","src","width","height","frameBorder","allowtransparency","allow"],"sourceRoot":"","sources":["/Users/nathan/Sites/giglist-v2-vue/src/App.vue"],"sourcesContent":["<template>\n\n  <CitySelect \n    onChange=\"getCityData\"\n  />\n\n  <div className=\"results relative p-6 text-xl\">\n    <p>\n      <a className=\"no-underline hover:underline inline-block decoration-1\" :href=\"randomGigUrl\"><strong>{{\n          randomGigArtist }}</strong> is playing on\n        <br /><strong>{{ randomGigDayOfWeek }}, {{ randomGigMonth }} {{ randomGigDay }}</strong> at\n        {{ randomGigVenue }}&nbsp;→\n      </a>\n    </p>\n\n    <iframe className=\"mt-6 w-full\" :src=\"spotifyEmbedUrl\" v-if=\"spotifyEmbedUrl\" width=\"100%\" height=\"80\"\n      frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\n  </div>\n</template>\n\n<script>\n\nimport CitySelect from './components/CitySelect.vue'\n// import ResultItem from './components/ResultItem.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    CitySelect\n  },\n  data() {\n    return {\n      songkickData: [],      \n      spotifyToken: '',\n      spotifyEmbedUrl: '',\n      randomGigVenue: '',\n      randomGigUrl: '',\n      randomGigDayOfWeek: '',\n      randomGigMonth: '',\n      randomGigDay: '',\n      randomGigArtist: ''\n    }\n  },\n  props: [\n     \n  ],\n  async created(){\n    \n    // The first step in getting data from Spotify API is to do a POST request with our client ID and secret to get an access token in response (From this tutorial: https://www.youtube.com/watch?v=SbelQW2JaDQ)    \n    // The below private method returns a promise (as denoted by 'async'); we store the endpoint response in variable 'result' \n    const clientId = '5478fc8855ee4fcaa624bbb2053924e9'\n    const clientSecret = 'db24d93b5c434ce0a22680c6252f40ab'\n    const result = await fetch('https://accounts.spotify.com/api/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Basic ' + btoa(clientId + ':' + clientSecret)\n      },\n      body: 'grant_type=client_credentials'\n    });\n\n    // We await the json result from above and store it in variable 'data' and specifically return the access_token from the json data\n    // We'll use this token to call Spotify API endpoint below\n    const data = await result.json()\n    this.spotifyToken = data.access_token;   \n\n    // Also, show a default result on page load\n    this.getCityData(this.selected)    \n  },  \n  methods: {\n    async getCityData(defaultCityId, e) {\n      console.log('this ran')\n      // Store city ID from selected <option> value in a variable; use defaultCityId on page load only\n      const songkickCityId = defaultCityId ? this.selected : e.target.value\n\n      // Using the getSongkickUrl method, generate a URL using the ID and date from above\n      let songkickUrl = this.getSongkickUrl(songkickCityId)      \n\n      // Fetch data from the URL generated above and extract it as a JSON object; Note: I'm using await/async instead of .then() chains, I think because it's cleaner and easier to read but not entirely sure\n      const response = await fetch(songkickUrl)\n      const responseJSON = await response.json()\n\n      // Store returned data in songkickData array defined above      \n      this.songkickData = responseJSON\n              \n      this.getRandomGigData()\n    },\n    getSongkickUrl(songkickCityId) {\n      const now = new Date()\n      const today = now.toISOString().slice(0, 10)\n      const songkickAPIKey = 'RpuYqxFiPPsJPs5l'\n      let songkickUrl = `https://api.songkick.com/api/3.0/metro_areas/${songkickCityId}/calendar.json?min_date=${today}&apikey=${songkickAPIKey}`;\n      \n      return songkickUrl\n    },\n    getRandomGigData() {      \n      const listOfGigs = this.songkickData.resultsPage.results.event\n      const randomGig = listOfGigs[Math.floor(Math.random()*listOfGigs.length)];\n      const randomGigDate = new Date(randomGig.start.datetime);\n      this.randomGigVenue = randomGig.venue.displayName;\n      this.randomGigUrl = randomGig.uri;      \n      this.randomGigDayOfWeek = randomGigDate.toLocaleString('default', { weekday: 'long' });\n      this.randomGigMonth = randomGigDate.toLocaleString('default', { month: 'long' });\n      this.randomGigDay = randomGigDate.getDate();\n      this.randomGigArtist = randomGig.performance[0].artist.displayName;      \n      \n      this.getSpotifyEmbedUrl(this.spotifyToken, this.randomGigArtist)\n    },\n\n    async getSpotifyEmbedUrl(token, artistName) {\n      const artistResult = await fetch(`https://api.spotify.com/v1/search?q=${artistName}&type=artist&limit=1`, {\n        method: 'GET',\n        headers: { \n\t\t\t\t  'Content-Type': 'application/json',\n          'Accept': 'application/json',          \n          'Authorization': 'Bearer ' + token \n        }  \n      });\n      const spotifyData = await artistResult.json()\n      const spotifyArtistId = spotifyData.artists.items[0].id     \n      this.spotifyEmbedUrl = `https://open.spotify.com/embed/artist/${spotifyArtistId}`\n    }\n  }\n}\n</script> "]},"metadata":{},"sourceType":"module"}