{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nvar _hoisted_1 = {\n  className: \"max-w-xl m-auto px-4 md:px-8 mt-12 md:mt-24\"\n};\nvar _hoisted_2 = {\n  className: \"mb-16 text-center\"\n};\nvar _hoisted_3 = {\n  className: \"inline-block m-auto\"\n};\n\nvar _hoisted_4 = /*#__PURE__*/_createElementVNode(\"h1\", {\n  className: \"text-3xl sm:text-4xl inline mr-3\"\n}, \"Find a concert in\", -1\n/* HOISTED */\n);\n\nvar _hoisted_5 = {\n  className: \"city-select relative inline flex items-center\"\n};\nvar _hoisted_6 = [\"value\"];\nvar _hoisted_7 = {\n  className: \"-ml-16 text-2xl\"\n};\nvar _hoisted_8 = {\n  className: \"results relative p-6 text-xl\"\n};\nvar _hoisted_9 = [\"href\"];\n\nvar _hoisted_10 = /*#__PURE__*/_createTextVNode(\" is playing on \");\n\nvar _hoisted_11 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nvar _hoisted_12 = [\"src\"];\nvar _hoisted_13 = {\n  className: \"block text-center p-4\"\n};\nvar _hoisted_14 = {\n  className: \"hover:underline\"\n};\n\nvar _hoisted_15 = /*#__PURE__*/_createTextVNode(\"Get Another \");\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_font_awesome_icon = _resolveComponent(\"font-awesome-icon\");\n\n  return _openBlock(), _createElementBlock(\"main\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_hoisted_4, _createElementVNode(\"div\", _hoisted_5, [_withDirectives(_createElementVNode(\"select\", {\n    className: \"bg-gray-600 hover:bg-gray-700 text-2xl sm:text-3xl py-2 px-3 mt-2 font-light rounded-sm border-gray-600 hover:border-gray-700 cursor-pointer\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n      return $data.selected = $event;\n    }),\n    onChange: _cache[1] || (_cache[1] = function () {\n      return $options.getCityData && $options.getCityData.apply($options, arguments);\n    })\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.cities, function (city) {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: city.id,\n      value: city.id\n    }, _toDisplayString(city.label), 9\n    /* TEXT, PROPS */\n    , _hoisted_6);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))], 544\n  /* HYDRATE_EVENTS, NEED_PATCH */\n  ), [[_vModelSelect, $data.selected]]), _createElementVNode(\"span\", _hoisted_7, [_createVNode(_component_font_awesome_icon, {\n    icon: \"angle-down\"\n  })])])])]), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"p\", null, [_createElementVNode(\"a\", {\n    className: \"no-underline hover:underline inline-block decoration-1\",\n    href: $data.randomGigUrl\n  }, [_createElementVNode(\"strong\", null, _toDisplayString($data.randomGigArtist), 1\n  /* TEXT */\n  ), _hoisted_10, _hoisted_11, _createElementVNode(\"strong\", null, _toDisplayString($data.randomGigDayOfWeek) + \", \" + _toDisplayString($data.randomGigMonth) + \" \" + _toDisplayString($data.randomGigDay), 1\n  /* TEXT */\n  ), _createTextVNode(\" at \" + _toDisplayString($data.randomGigVenue) + \" → \", 1\n  /* TEXT */\n  )], 8\n  /* PROPS */\n  , _hoisted_9)]), $data.spotifyEmbedUrl ? (_openBlock(), _createElementBlock(\"iframe\", {\n    key: 0,\n    className: \"mt-6 w-full\",\n    src: $data.spotifyEmbedUrl,\n    width: \"100%\",\n    height: \"80\",\n    frameBorder: \"0\",\n    allowtransparency: \"true\",\n    allow: \"encrypted-media\"\n  }, null, 8\n  /* PROPS */\n  , _hoisted_12)) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"button\", _hoisted_14, [_createVNode(_component_font_awesome_icon, {\n    icon: \"repeat\",\n    className: \"pr-2\"\n  }), _hoisted_15])])]);\n}","map":{"version":3,"mappings":";;EACQA,SAAS,EAAC;;;EACTA,SAAS,EAAC;;;EACRA,SAAS,EAAC;;;8BACbC,oBAAuE,IAAvE,EAAuE;EAAnED,SAAS,EAAC;AAAyD,CAAvE,EAAiD,mBAAjD,EAAkE;AAAA;AAAlE;;;EACKA,SAAS,EAAC;;;;EAMPA,SAAS,EAAC;;;EAOjBA,SAAS,EAAC;;;;gDAGoB;;+BAC7BC,oBAAM,IAAN,EAAM,IAAN,EAAM,IAAN,EAAM;AAAA;AAAN;;;;EASDD,SAAS,EAAC;;;EACLA,SAAS,EAAC;;;gDACoC;;;;;uBAhC1DE,oBAmCO,MAnCP,cAmCO,CAlCLD,oBAcM,KAdN,cAcM,CAbJA,oBAYM,KAZN,cAYM,CAXJE,UAWI,EAVJF,oBASM,KATN,cASM,iBARJA,oBAIS,QAJT,EAIS;IAHPD,SAAS,EAAC,8IAGH;;aAFEI,iBAAQC;MAEV;IAFaC,QAAM;MAAA,OAAEC,uEAAF;IAAA;EAEnB,CAJT,sBAGEL,oBAAwFM,SAAxF,EAAwF,IAAxF,EAAwFC,YAAjEL,YAAiE,EAA3D,UAAdM,IAAc,EAAV;yBAAnBR,oBAAwF,QAAxF,EAAwF;MAAxDS,GAAG,EAAED,IAAI,CAACE,EAA8C;MAAzCC,KAAK,EAAEH,IAAI,CAACE;IAA6B,CAAxF,mBAAkEF,IAAI,CAACI,MAAvE,EAA4E;IAAA;IAA5E,EAA4EC,UAA5E;GAAwF,CAAxF;;EAAA,GAHF;;EAAA,oBAEWX,iBAMP,EAHJH,oBAEO,MAFP,cAEO,CADLe,aAAuCC,4BAAvC,EAAuC;IAApBC,IAAI,EAAC;EAAe,CAAvC,CACK,CAFP,CAGI,CATN,CAUI,CAZN,CAaI,CAdN,CAkCK,EAlBLjB,oBAWM,KAXN,cAWM,CAVJA,oBAMI,GANJ,EAMI,IANJ,EAMI,CALFA,oBAII,GAJJ,EAII;IAJDD,SAAS,EAAC,wDAIT;IAJmEmB,IAAI,EAAEf;EAIzE,CAJJ,GAA2FH,oBAC5D,QAD4D,EAC5D,IAD4D,EAC5DmB,iBAA3BhB,qBAA2B,CAD4D,EACxE;EAAA;EADwE,gBAEzFiB,aAAMpB,oBAAkF,QAAlF,EAAkF,IAAlF,EAAkFmB,iBAAvEhB,wBAAuE,IAAlD,IAAkD,GAAhDgB,iBAAGhB,oBAAH,CAAgD,GAA5B,GAA4B,GAA3BgB,iBAAGhB,kBAAH,CAAvD,EAAsE;EAAA;EAAtE,oBAAkF,SACxFgB,iBAAGhB,oBAAH,CADwF,GACpE,OACtB;EAAA;IAJA;;EAAA,aAKE,CANJ,CAUI,EAFyDA,uCAA7DF,oBAC4E,QAD5E,EAC4E;UAAA;IADpEF,SAAS,EAAC,aAC0D;IAD3CsB,GAAG,EAAElB,qBACsC;IADEmB,KAAK,EAAC,MACR;IADeC,MAAM,EAAC,IACtB;IAA1EC,WAAW,EAAC,GAA8D;IAA1DC,iBAAiB,EAAC,MAAwC;IAAjCC,KAAK,EAAC;EAA2B,CAD5E;;EAAA,mDAEI,CAXN,CAkBK,EALL1B,oBAIM,KAJN,eAIM,CAHJA,oBAES,QAFT,eAES,CADPe,aAAoDC,4BAApD,EAAoD;IAAjCC,IAAI,EAAC,QAA4B;IAAnBlB,SAAS,EAAC;EAAS,CAApD,CACO,cAFT,CAGI,CAJN,CAKK,CAnCP","names":["className","_createElementVNode","_createElementBlock","_hoisted_4","$data","$event","onChange","$options","_Fragment","_renderList","city","key","id","value","label","_hoisted_6","_createVNode","_component_font_awesome_icon","icon","href","_toDisplayString","_hoisted_11","src","width","height","frameBorder","allowtransparency","allow"],"sourceRoot":"","sources":["/Users/nathan/Sites/giglist-v2-vue/src/App.vue"],"sourcesContent":["<template>\n  <main className=\"max-w-xl m-auto px-4 md:px-8 mt-12 md:mt-24\">\n    <div className=\"mb-16 text-center\">\n      <div className=\"inline-block m-auto\">\n        <h1 className=\"text-3xl sm:text-4xl inline mr-3\">Find a concert in</h1>\n        <div className=\"city-select relative inline flex items-center\">\n          <select\n            className=\"bg-gray-600 hover:bg-gray-700 text-2xl sm:text-3xl py-2 px-3 mt-2 font-light rounded-sm border-gray-600 hover:border-gray-700 cursor-pointer\"\n            v-model=\"selected\" @change=\"getCityData\">\n            <option v-for=\"city in cities\" :key=\"city.id\" :value=\"city.id\">{{ city.label }}</option>\n          </select>\n          <span className=\"-ml-16 text-2xl\">\n            <font-awesome-icon icon=\"angle-down\" />\n          </span>\n        </div>\n      </div>\n    </div>\n\n    <div className=\"results relative p-6 text-xl\">\n      <p>\n        <a className=\"no-underline hover:underline inline-block decoration-1\" :href=\"randomGigUrl\"><strong>{{\n            randomGigArtist }}</strong> is playing on\n          <br /><strong>{{ randomGigDayOfWeek }}, {{ randomGigMonth }} {{ randomGigDay }}</strong> at\n          {{ randomGigVenue }}&nbsp;→\n        </a>\n      </p>\n\n      <iframe className=\"mt-6 w-full\" :src=\"spotifyEmbedUrl\" v-if=\"spotifyEmbedUrl\" width=\"100%\" height=\"80\"\n        frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\n    </div>\n\n    <div className=\"block text-center p-4\">\n      <button className=\"hover:underline\">\n        <font-awesome-icon icon=\"repeat\" className=\"pr-2\" />Get Another\n      </button>\n    </div>\n  </main>\n</template>\n\n<script>\n\nimport cityData from \"./data/songkickCityData.js\"\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      selected: 7644,\n      cities: cityData,\n      songkickData: [],      \n      spotifyToken: '',\n      spotifyEmbedUrl: '',\n      randomGigVenue: '',\n      randomGigUrl: '',\n      randomGigDayOfWeek: '',\n      randomGigMonth: '',\n      randomGigDay: '',\n      randomGigArtist: ''\n    }\n  },\n  async created(){\n    \n    // The first step in getting data from Spotify API is to do a POST request with our client ID and secret to get an access token in response (From this tutorial: https://www.youtube.com/watch?v=SbelQW2JaDQ)    \n    // The below private method returns a promise (as denoted by 'async'); we store the endpoint response in variable 'result' \n    const clientId = '5478fc8855ee4fcaa624bbb2053924e9'\n    const clientSecret = 'db24d93b5c434ce0a22680c6252f40ab'\n    const result = await fetch('https://accounts.spotify.com/api/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Basic ' + btoa(clientId + ':' + clientSecret)\n      },\n      body: 'grant_type=client_credentials'\n    });\n\n    // We await the json result from above and store it in variable 'data' and specifically return the access_token from the json data\n    // We'll use this token to call Spotify API endpoint below\n    const data = await result.json()\n    this.spotifyToken = data.access_token;   \n\n    // Also, show a default result on page load\n    this.getCityData(this.selected)    \n  },  \n  methods: {\n    async getCityData(defaultCityId, e) {\n\n      // Store city ID from selected <option> value in a variable; use defaultCityId on page load only\n      const songkickCityId = defaultCityId ? this.selected : e.target.value\n\n      // Using the getSongkickUrl method, generate a URL using the ID and date from above\n      let songkickUrl = this.getSongkickUrl(songkickCityId)      \n\n      // Fetch data from the URL generated above and extract it as a JSON object; Note: I'm using await/async instead of .then() chains, I think because it's cleaner and easier to read but not entirely sure\n      const response = await fetch(songkickUrl)\n      const responseJSON = await response.json()\n\n      // Store returned data in songkickData array defined above      \n      this.songkickData = responseJSON\n              \n      this.getRandomGigData()\n    },\n    getSongkickUrl(songkickCityId) {\n      const now = new Date()\n      const today = now.toISOString().slice(0, 10)\n      const songkickAPIKey = 'RpuYqxFiPPsJPs5l'\n      let songkickUrl = `https://api.songkick.com/api/3.0/metro_areas/${songkickCityId}/calendar.json?min_date=${today}&apikey=${songkickAPIKey}`;\n      \n      return songkickUrl\n    },\n    getRandomGigData() {      \n      const listOfGigs = this.songkickData.resultsPage.results.event\n      const randomGig = listOfGigs[Math.floor(Math.random()*listOfGigs.length)];\n      const randomGigDate = new Date(randomGig.start.datetime);\n      this.randomGigVenue = randomGig.venue.displayName;\n      this.randomGigUrl = randomGig.uri;      \n      this.randomGigDayOfWeek = randomGigDate.toLocaleString('default', { weekday: 'long' });\n      this.randomGigMonth = randomGigDate.toLocaleString('default', { month: 'long' });\n      this.randomGigDay = randomGigDate.getDate();\n      this.randomGigArtist = randomGig.performance[0].artist.displayName;      \n      \n      this.getSpotifyEmbedUrl(this.spotifyToken, this.randomGigArtist)\n    },\n\n    async getSpotifyEmbedUrl(token, artistName) {\n      const artistResult = await fetch(`https://api.spotify.com/v1/search?q=${artistName}&type=artist&limit=1`, {\n        method: 'GET',\n        headers: { \n\t\t\t\t  'Content-Type': 'application/json',\n          'Accept': 'application/json',          \n          'Authorization': 'Bearer ' + token \n        }  \n      });\n      const spotifyData = await artistResult.json()\n      const spotifyArtistId = spotifyData.artists.items[0].id     \n      this.spotifyEmbedUrl = `https://open.spotify.com/embed/artist/${spotifyArtistId}`\n    }\n  }\n}\n</script>  \n"]},"metadata":{},"sourceType":"module"}