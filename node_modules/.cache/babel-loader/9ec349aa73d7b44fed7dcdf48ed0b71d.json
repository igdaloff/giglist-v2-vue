{"ast":null,"code":"import _regeneratorRuntime from \"/Users/nathan/Sites/giglist-v2-vue/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/nathan/Sites/giglist-v2-vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/web.btoa.js\";\nimport \"core-js/modules/web.dom-exception.constructor.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/web.dom-exception.to-string-tag.js\";\nimport cityData from \"../data/songkickCityData.js\";\nexport default {\n  data: function data() {\n    return {\n      selected: 7644,\n      cities: cityData,\n      songkickData: [],\n      randomGigVenue: '',\n      randomGigUrl: '',\n      randomGigDayOfWeek: '',\n      randomGigMonth: '',\n      randomGigDay: '',\n      randomGigArtist: ''\n    };\n  },\n  methods: {\n    getCityData: function getCityData(e) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var songkickCityId, songkickUrl, response, responseJSON;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Store city ID from selected <option> value in a variable\n                songkickCityId = e.target.value; // Using the getSongkickUrl method, generate a URL using the ID and date from above\n\n                songkickUrl = _this.getSongkickUrl(songkickCityId); // Fetch data from the URL generated above and extract it as a JSON object; Note: I'm using await/async instead of .then() chains, I think because it's cleaner and easier to read but not entirely sure\n\n                _context.next = 4;\n                return fetch(songkickUrl);\n\n              case 4:\n                response = _context.sent;\n                _context.next = 7;\n                return response.json();\n\n              case 7:\n                responseJSON = _context.sent;\n                // Store returned data in songkickData array defined above      \n                _this.songkickData = responseJSON;\n\n                _this.getRandomGigData();\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    getSongkickUrl: function getSongkickUrl(songkickCityId) {\n      var now = new Date();\n      var today = now.toISOString().slice(0, 10);\n      var songkickAPIKey = 'RpuYqxFiPPsJPs5l';\n      var songkickUrl = \"https://api.songkick.com/api/3.0/metro_areas/\".concat(songkickCityId, \"/calendar.json?min_date=\").concat(today, \"&apikey=\").concat(songkickAPIKey);\n      return songkickUrl;\n    },\n    getRandomGigData: function getRandomGigData() {\n      var listOfGigs = this.songkickData.resultsPage.results.event;\n      var randomGig = listOfGigs[Math.floor(Math.random() * listOfGigs.length)];\n      var randomGigDate = new Date(randomGig.start.datetime);\n      this.randomGigVenue = randomGig.venue.displayName;\n      this.randomGigUrl = randomGig.uri;\n      this.randomGigDayOfWeek = randomGigDate.toLocaleString('default', {\n        weekday: 'long'\n      });\n      this.randomGigMonth = randomGigDate.toLocaleString('default', {\n        month: 'long'\n      });\n      this.randomGigDay = randomGigDate.getDate();\n      this.randomGigArtist = randomGig.performance[0].artist.displayName;\n    },\n    // The first step in getting data from Spotify API is to do a POST request with our client ID and secret to get an access token in response (From this tutorial: https://www.youtube.com/watch?v=SbelQW2JaDQ)    \n    // The below private method returns a promise (as denoted by 'async'); we store the endpoint response in variable 'result'    \n    getSpotifyToken: function getSpotifyToken() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var clientId, clientSecret, result, data;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                clientId = '471048b4fff14c79b12b08abb6dae22e';\n                clientSecret = 'd8b25c87a3e248beb461a94b48f5905f';\n                _context2.next = 4;\n                return fetch('https://accounts.spotify.com/api/token', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'Authorization': 'Basic ' + btoa(clientId + ':' + clientSecret)\n                  },\n                  body: 'grant_type=client_credentials'\n                });\n\n              case 4:\n                result = _context2.sent;\n                _context2.next = 7;\n                return result.json();\n\n              case 7:\n                data = _context2.sent;\n                return _context2.abrupt(\"return\", data.access_token);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    }\n  },\n  beforeMount: function beforeMount() {\n    this.getSpotifyToken();\n  }\n};","map":{"version":3,"mappings":"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","names":["cityData","data","selected","cities","songkickData","randomGigVenue","randomGigUrl","randomGigDayOfWeek","randomGigMonth","randomGigDay","randomGigArtist","methods","getCityData","e","songkickCityId","target","value","songkickUrl","getSongkickUrl","fetch","response","json","responseJSON","getRandomGigData","now","Date","today","toISOString","slice","songkickAPIKey","listOfGigs","resultsPage","results","event","randomGig","Math","floor","random","length","randomGigDate","start","datetime","venue","displayName","uri","toLocaleString","weekday","month","getDate","performance","artist","getSpotifyToken","clientId","clientSecret","method","headers","btoa","body","result","access_token","beforeMount"],"sourceRoot":"","sources":["/Users/nathan/Sites/giglist-v2-vue/src/components/CitySelect.vue"],"sourcesContent":["<template>\n  <select v-model=\"selected\" @change=\"getCityData\">\n    <option v-for=\"city in cities\" :key=\"city.id\" :value=\"city.id\">{{ city.label }}</option>\n  </select>\n  <p>{{ randomGigVenue }}</p>\n  <p>{{ randomGigUrl }}</p>\n  <p>{{ randomGigDayOfWeek }}</p>\n  <p>{{ randomGigMonth }}</p>\n  <p>{{ randomGigDay }}</p>\n  <p>{{ randomGigArtist }}</p>\n</template>\n\n<script>\n\nimport cityData from \"../data/songkickCityData.js\"\n\nexport default {\n  data() {\n    return {\n      selected: 7644,\n      cities: cityData,\n      songkickData: [],\n      randomGigVenue: '',\n      randomGigUrl: '',\n      randomGigDayOfWeek: '',\n      randomGigMonth: '',\n      randomGigDay: '',\n      randomGigArtist: ''\n    }\n  },\n  methods: {\n    async getCityData(e) {\n\n      // Store city ID from selected <option> value in a variable\n      const songkickCityId = e.target.value\n\n      // Using the getSongkickUrl method, generate a URL using the ID and date from above\n      let songkickUrl = this.getSongkickUrl(songkickCityId)      \n\n      // Fetch data from the URL generated above and extract it as a JSON object; Note: I'm using await/async instead of .then() chains, I think because it's cleaner and easier to read but not entirely sure\n      const response = await fetch(songkickUrl)\n      const responseJSON = await response.json()\n\n      // Store returned data in songkickData array defined above      \n      this.songkickData = responseJSON\n              \n      this.getRandomGigData()\n    },\n    getSongkickUrl(songkickCityId) {\n      const now = new Date()\n      const today = now.toISOString().slice(0, 10)\n      const songkickAPIKey = 'RpuYqxFiPPsJPs5l'\n      let songkickUrl = `https://api.songkick.com/api/3.0/metro_areas/${songkickCityId}/calendar.json?min_date=${today}&apikey=${songkickAPIKey}`;\n      \n      return songkickUrl\n    },\n    getRandomGigData() {      \n      const listOfGigs = this.songkickData.resultsPage.results.event\n      const randomGig = listOfGigs[Math.floor(Math.random()*listOfGigs.length)];\n      const randomGigDate = new Date(randomGig.start.datetime);\n      this.randomGigVenue = randomGig.venue.displayName;\n      this.randomGigUrl = randomGig.uri;      \n      this.randomGigDayOfWeek = randomGigDate.toLocaleString('default', { weekday: 'long' });\n      this.randomGigMonth = randomGigDate.toLocaleString('default', { month: 'long' });\n      this.randomGigDay = randomGigDate.getDate();\n      this.randomGigArtist = randomGig.performance[0].artist.displayName;            \n    },\n\n    // The first step in getting data from Spotify API is to do a POST request with our client ID and secret to get an access token in response (From this tutorial: https://www.youtube.com/watch?v=SbelQW2JaDQ)    \n    // The below private method returns a promise (as denoted by 'async'); we store the endpoint response in variable 'result'    \n    async getSpotifyToken () {    \n      const clientId = '471048b4fff14c79b12b08abb6dae22e'\n      const clientSecret = 'd8b25c87a3e248beb461a94b48f5905f'\n      const result = await fetch('https://accounts.spotify.com/api/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': 'Basic ' + btoa(clientId + ':' + clientSecret)\n        },\n        body: 'grant_type=client_credentials'\n      });\n\n      // We await the json result from above and store it in variable 'data' and specifically return the access_token from the json data\n      // We can use this token to call Spotify API endpoint\n      const data = await result.json(); \n      return data.access_token;      \n    }\n  },\n  beforeMount(){\n    this.getSpotifyToken()    \n  }\n}\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module"}