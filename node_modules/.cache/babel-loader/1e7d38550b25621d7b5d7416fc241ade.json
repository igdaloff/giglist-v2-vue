{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _withDirectives((_openBlock(), _createElementBlock(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selected = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.getCityData && $options.getCityData(...args))\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.cities, city => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: city.id,\n      value: city.id\n    }, _toDisplayString(city.label), 9\n    /* TEXT, PROPS */\n    , _hoisted_1);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))], 544\n  /* HYDRATE_EVENTS, NEED_PATCH */\n  )), [[_vModelSelect, $data.selected]]);\n}","map":{"version":3,"mappings":";;;wCACEA,oBAES,QAFT,EAES;+DAFQC,iBAAQC,OAEhB;IAFmBC,QAAM,yCAAEC,qDAAF;EAEzB,CAFT,sBACEJ,oBAAwFK,SAAxF,EAAwF,IAAxF,EAAwFC,YAAjEL,YAAiE,EAAzEM,IAAc,IAAV;yBAAnBP,oBAAwF,QAAxF,EAAwF;MAAxDQ,GAAG,EAAED,IAAI,CAACE,EAA8C;MAAzCC,KAAK,EAAEH,IAAI,CAACE;IAA6B,CAAxF,mBAAkEF,IAAI,CAACI,MAAvE,EAA4E;IAAA;IAA5E,EAA4EC,UAA5E;GAAwF,CAAxF;;EAAA,GADF;;EAAA,qBAAiBX","names":["_createElementBlock","$data","$event","onChange","$options","_Fragment","_renderList","city","key","id","value","label","_hoisted_1"],"sourceRoot":"","sources":["/Users/nathan/Sites/giglist-v2-vue/src/components/CitySelect.vue"],"sourcesContent":["<template>\n  <select v-model=\"selected\" @change=\"getCityData\">\n    <option v-for=\"city in cities\" :key=\"city.id\" :value=\"city.id\">{{ city.label }}</option>\n  </select>\n</template>\n\n<script>\n\nimport cityData from \"../data/songkickCityData.js\"\n\nexport default {\n  data() {\n    return {\n      selected: 7644,\n      cities: cityData,\n      songkickData: []\n    }\n  },\n  methods: {\n    getCityData(e) {\n\n      // Store city ID from selected <option> value in a variable\n      const songkickCityId = e.target.value\n\n      // Using the getSongkickUrl method, generate a URL using the ID and date from above\n      let songkickUrl = this.getSongkickUrl(songkickCityId)      \n\n      // Fetch data from the URL generated above\n      fetch(songkickUrl)\n        .then(res => res.json())\n        \n        // Store returned data in songkickData array defined above\n        .then(data => { \n          this.songkickData = data; \n          this.getRandomGig()\n        })\n        .catch(err => console.log(err.message))   \n                  \n    },\n    getSongkickUrl(songkickCityId) {\n      const now = new Date()\n      const today = now.toISOString().slice(0, 10)\n      const songkickAPIKey = 'RpuYqxFiPPsJPs5l'\n      let songkickUrl = `https://api.songkick.com/api/3.0/metro_areas/${songkickCityId}/calendar.json?min_date=${today}&apikey=${songkickAPIKey}`;\n      \n      return songkickUrl\n    },\n    getRandomGig() {\n      \n      console.log(this.songkickData)\n\n    },\n\n    // The first step in getting data from Spotify API is to do a POST request with our client ID and secret to get an access token in response (From this tutorial: https://www.youtube.com/watch?v=SbelQW2JaDQ)    \n    // The below private method returns a promise (as denoted by 'async'); we store the endpoint response in variable 'result'    \n    async getSpotifyToken () {    \n      const clientId = '471048b4fff14c79b12b08abb6dae22e'\n      const clientSecret = 'd8b25c87a3e248beb461a94b48f5905f'\n      const result = await fetch('https://accounts.spotify.com/api/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': 'Basic ' + btoa(clientId + ':' + clientSecret)\n        },\n        body: 'grant_type=client_credentials'\n      });\n\n      // We await the json result from above and store it in variable 'data' and specifically return the access_token from the json data\n      // We can use this token to call Spotify API endpoint\n      const data = await result.json();      \n      return data.access_token;      \n    }\n  },\n  beforeMount(){\n    this.getSpotifyToken()    \n  }\n}\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module"}