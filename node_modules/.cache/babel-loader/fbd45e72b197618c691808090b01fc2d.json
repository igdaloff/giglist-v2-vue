{"ast":null,"code":"import _regeneratorRuntime from \"/Users/nathan/Sites/giglist-v2-vue/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/nathan/Sites/giglist-v2-vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/web.btoa.js\";\nimport \"core-js/modules/web.dom-exception.constructor.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/web.dom-exception.to-string-tag.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport cityData from \"../data/songkickCityData.js\";\nexport default {\n  name: 'App',\n  data: function data() {\n    return {\n      selected: 7644,\n      cities: cityData,\n      songkickData: [],\n      spotifyToken: '',\n      spotifyEmbedUrl: '',\n      randomGigVenue: '',\n      randomGigUrl: '',\n      randomGigDayOfWeek: '',\n      randomGigMonth: '',\n      randomGigDay: '',\n      randomGigArtist: '',\n      randomGigTime: '',\n      gigIsToday: ''\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var result, data;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('https://accounts.spotify.com/api/token', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/x-www-form-urlencoded',\n                  'Authorization': 'Basic ' + btoa(process.env.REACT_APP_SPOTIFY_API_KEY)\n                },\n                body: 'grant_type=client_credentials'\n              });\n\n            case 2:\n              result = _context.sent;\n              _context.next = 5;\n              return result.json();\n\n            case 5:\n              data = _context.sent;\n              _this.spotifyToken = data.access_token; // Also, show a default result on page load\n\n              _this.getCityData(_this.selected);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  methods: {\n    getCityData: function getCityData(defaultCityId, e) {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var songkickCityId, songkickUrl, songkickData, CACHE_MAX_AGE, cachedResultJSON, cachedResult, response, dataToCache;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // Store city ID from selected <option> value in a variable; use defaultCityId on page load only\n                songkickCityId = defaultCityId ? _this2.selected : e.target.value; // Using the getSongkickUrl method, generate a URL using the ID and date from above\n\n                songkickUrl = _this2.getSongkickUrl(songkickCityId);\n                CACHE_MAX_AGE = 24 * 60 * 60 * 1000; // 24 hrs in ms\n\n                cachedResultJSON = localStorage.getItem(\"cache-\".concat(songkickCityId));\n                cachedResult = JSON.parse(cachedResultJSON);\n\n                if (!(cachedResult && Date.now() - cachedResult.createdAt < CACHE_MAX_AGE)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                // If data is cached, set songkickData as data from cache\n                songkickData = cachedResult.songkickData;\n                _context2.next = 17;\n                break;\n\n              case 9:\n                _context2.next = 11;\n                return fetch(songkickUrl);\n\n              case 11:\n                response = _context2.sent;\n                _context2.next = 14;\n                return response.json();\n\n              case 14:\n                songkickData = _context2.sent;\n                dataToCache = {\n                  createdAt: Date.now(),\n                  songkickData: songkickData\n                };\n                localStorage.setItem(\"cache-\".concat(songkickCityId), JSON.stringify(dataToCache));\n\n              case 17:\n                _this2.songkickData = songkickData;\n\n                _this2.getRandomGigData();\n\n              case 19:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    getSongkickUrl: function getSongkickUrl(songkickCityId) {\n      var now = new Date();\n      var today = now.toISOString().slice(0, 10);\n      var songkickAPIKey = process.env.REACT_APP_SONGKICK_API_KEY;\n      var songkickUrl = \"https://api.songkick.com/api/3.0/metro_areas/\".concat(songkickCityId, \"/calendar.json?min_date=\").concat(today, \"&apikey=\").concat(songkickAPIKey);\n      return songkickUrl;\n    },\n    getRandomGigData: function getRandomGigData() {\n      var listOfGigs = this.songkickData.resultsPage.results.event;\n      var randomGig = listOfGigs[Math.floor(Math.random() * listOfGigs.length)];\n      var now = new Date();\n      var today = now.toISOString().slice(0, 10);\n      this.gigIsToday = new Date(randomGig.start.date).toISOString().slice(0, 10) == today;\n      var randomGigDate = new Date(randomGig.start.date.replace(/-/g, '\\/')); //Replacing dash with slash to fix quirky thing with Date() object being 1 day off: https://stackoverflow.com/questions/7556591/is-the-javascript-date-object-always-one-day-off\n\n      this.randomGigVenue = randomGig.venue.displayName;\n      this.randomGigUrl = randomGig.uri;\n      this.randomGigDayOfWeek = randomGigDate.toLocaleString('default', {\n        weekday: 'long'\n      });\n      this.randomGigMonth = randomGigDate.toLocaleString('default', {\n        month: 'long'\n      });\n      this.randomGigDay = randomGigDate.getDate();\n      this.randomGigArtist = randomGig.performance[0].artist.displayName;\n      this.randomGigTime = randomGig.start.time ? randomGig.start.time.slice(0, -3) : '';\n      this.getSpotifyEmbedUrl(this.spotifyToken, this.randomGigArtist);\n    },\n    getSpotifyEmbedUrl: function getSpotifyEmbedUrl(token, artistName) {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var artistResult, spotifyData, spotifyArtistId;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return fetch(\"https://api.spotify.com/v1/search?q=\".concat(artistName, \"&type=artist&limit=1\"), {\n                  method: 'GET',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json',\n                    'Authorization': 'Bearer ' + token\n                  }\n                });\n\n              case 2:\n                artistResult = _context3.sent;\n                _context3.next = 5;\n                return artistResult.json();\n\n              case 5:\n                spotifyData = _context3.sent;\n                spotifyArtistId = spotifyData.artists.items[0].id;\n                _this3.spotifyEmbedUrl = \"https://open.spotify.com/embed/artist/\".concat(spotifyArtistId);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["cityData","name","data","selected","cities","songkickData","spotifyToken","spotifyEmbedUrl","randomGigVenue","randomGigUrl","randomGigDayOfWeek","randomGigMonth","randomGigDay","randomGigArtist","randomGigTime","gigIsToday","created","fetch","method","headers","btoa","process","env","REACT_APP_SPOTIFY_API_KEY","body","result","json","access_token","getCityData","methods","defaultCityId","e","songkickCityId","target","value","songkickUrl","getSongkickUrl","CACHE_MAX_AGE","cachedResultJSON","localStorage","getItem","cachedResult","JSON","parse","Date","now","createdAt","response","dataToCache","setItem","stringify","getRandomGigData","today","toISOString","slice","songkickAPIKey","REACT_APP_SONGKICK_API_KEY","listOfGigs","resultsPage","results","event","randomGig","Math","floor","random","length","start","date","randomGigDate","replace","venue","displayName","uri","toLocaleString","weekday","month","getDate","performance","artist","time","getSpotifyEmbedUrl","token","artistName","artistResult","spotifyData","spotifyArtistId","artists","items","id"],"sourceRoot":"","sources":["/Users/nathan/Sites/giglist-v2-vue/src/views/HomeView.vue"],"sourcesContent":["<template>\n  <main className=\"max-w-xl m-auto px-4 md:px-8 mt-12 md:mt-24\">\n    <div className=\"mb-16 text-center\">\n      <div className=\"inline-block m-auto\">\n        <h1 className=\"text-3xl sm:text-4xl inline mr-3\">Find concerts in</h1>\n        <div className=\"city-select relative inline flex items-center\">\n          <select\n            className=\"bg-gray-600 hover:bg-gray-700 text-2xl sm:text-3xl py-2 px-3 mt-2 font-light rounded-sm border-gray-600 hover:border-gray-700 cursor-pointer\"\n            v-model=\"selected\" @change=\"getCityData\">\n            <option v-for=\"city in cities\" :key=\"city.id\" :value=\"city.id\">{{ city.label }}</option>\n          </select>\n          <span className=\"-ml-10 pt-2 text-2xl pointer-events-none\">\n            <font-awesome-icon icon=\"angle-down\" />\n          </span>\n        </div>\n      </div>\n    </div>\n\n    <div className=\"results relative p-6 text-xl\">\n      <p>\n        <a className=\"no-underline hover:underline inline-block decoration-1\" :href=\"randomGigUrl\"><strong>{{\n        randomGigArtist }}</strong> is playing\n          <br />\n          <strong v-if=\"!gigIsToday\">{{ randomGigDayOfWeek }} {{ randomGigMonth }} {{ randomGigDay }}</strong>\n          <strong v-else>Today, {{ randomGigTime }}</strong>\n          at {{ randomGigVenue }}&nbsp;→\n        </a>\n      </p>\n\n      <iframe v-if=\"spotifyEmbedUrl\" className=\"mt-6 w-full\" :src=\"spotifyEmbedUrl\" width=\"100%\" height=\"80\"\n        frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\n      <em v-else className=\"text-gray-600 text-sm pt-4 block\">[Artist not found on Spotify]</em>\n    </div>\n\n    <div className=\"block text-center p-4\">\n      <button className=\"hover:underline\" @click=\"getCityData\">\n        <font-awesome-icon icon=\"repeat\" className=\"pr-2\" /> Get Another\n      </button>\n    </div>\n  </main>\n</template>\n\n<script>\n\nimport cityData from \"../data/songkickCityData.js\"\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      selected: 7644,\n      cities: cityData,\n      songkickData: [], \n      spotifyToken: '',\n      spotifyEmbedUrl: '',\n      randomGigVenue: '',\n      randomGigUrl: '',\n      randomGigDayOfWeek: '',\n      randomGigMonth: '',\n      randomGigDay: '',\n      randomGigArtist: '',\n      randomGigTime: '',\n      gigIsToday: ''\n    }\n  },\n  async created(){\n    \n    // The first step in getting data from Spotify API is to do a POST request with our client ID and secret to get an access token in response (From this tutorial: https://www.youtube.com/watch?v=SbelQW2JaDQ)    \n    // The below private method returns a promise (as denoted by 'async'); we store the endpoint response in variable 'result' \n    const result = await fetch('https://accounts.spotify.com/api/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Basic ' + btoa(process.env.REACT_APP_SPOTIFY_API_KEY)\n      },\n      body: 'grant_type=client_credentials'\n    });\n\n    // We await the json result from above and store it in variable 'data' and specifically return the access_token from the json data\n    // We'll use this token to call Spotify API endpoint below\n    const data = await result.json()\n    this.spotifyToken = data.access_token;   \n\n    // Also, show a default result on page load\n    this.getCityData(this.selected)    \n  },  \n  methods: {\n    async getCityData(defaultCityId, e) {\n\n      // Store city ID from selected <option> value in a variable; use defaultCityId on page load only\n      const songkickCityId = defaultCityId ? this.selected : e.target.value\n      \n      // Using the getSongkickUrl method, generate a URL using the ID and date from above\n      const songkickUrl = this.getSongkickUrl(songkickCityId) \n      let songkickData  \n      const CACHE_MAX_AGE = 24 * 60 * 60 * 1000 // 24 hrs in ms\n      const cachedResultJSON = localStorage.getItem(`cache-${songkickCityId}`)\n      const cachedResult = JSON.parse(cachedResultJSON)      \n\n      if (cachedResult && Date.now() - cachedResult.createdAt < CACHE_MAX_AGE) {\n        // If data is cached, set songkickData as data from cache\n        songkickData = cachedResult.songkickData \n        \n      } else {\n        // If data not cached, fetch it from the URL generated in getSongkickURL(), extract it as a JSON object, and store it in a new cache, alongside a createdAt timestamp \n        // Also, store response in songkickData array defined above in data()\n        // Note: I'm using await/async instead of .then() chains, I think because it's cleaner and easier to read but not entirely sure...\n        const response = await fetch(songkickUrl)\n        songkickData = await response.json()\n\n        const dataToCache = {\n          createdAt: Date.now(),\n          songkickData\n        }                        \n        localStorage.setItem(`cache-${songkickCityId}`, JSON.stringify(dataToCache))                                 \n      }                \n\n      this.songkickData = songkickData  \n      this.getRandomGigData()\n    },\n    getSongkickUrl(songkickCityId) {\n      const now = new Date()\n      const today = now.toISOString().slice(0, 10)\n      const songkickAPIKey = process.env.REACT_APP_SONGKICK_API_KEY\n      let songkickUrl = `https://api.songkick.com/api/3.0/metro_areas/${songkickCityId}/calendar.json?min_date=${today}&apikey=${songkickAPIKey}`;\n      \n      return songkickUrl\n    },\n    getRandomGigData() {      \n      const listOfGigs = this.songkickData.resultsPage.results.event\n      const randomGig = listOfGigs[Math.floor(Math.random()*listOfGigs.length)];\n      const now = new Date()\n      const today = now.toISOString().slice(0, 10)\n      this.gigIsToday = new Date(randomGig.start.date).toISOString().slice(0, 10) == today\n\n      const randomGigDate = new Date(randomGig.start.date.replace(/-/g, '\\/')); //Replacing dash with slash to fix quirky thing with Date() object being 1 day off: https://stackoverflow.com/questions/7556591/is-the-javascript-date-object-always-one-day-off\n\n      this.randomGigVenue = randomGig.venue.displayName;\n      this.randomGigUrl = randomGig.uri;      \n      this.randomGigDayOfWeek = randomGigDate.toLocaleString('default', { weekday: 'long' });\n      this.randomGigMonth = randomGigDate.toLocaleString('default', { month: 'long' });\n      this.randomGigDay = randomGigDate.getDate();\n      this.randomGigArtist = randomGig.performance[0].artist.displayName;  \n      this.randomGigTime = randomGig.start.time ? randomGig.start.time.slice(0, -3) : ''\n\n      this.getSpotifyEmbedUrl(this.spotifyToken, this.randomGigArtist)\n    },\n\n    async getSpotifyEmbedUrl(token, artistName) {\n      const artistResult = await fetch(`https://api.spotify.com/v1/search?q=${artistName}&type=artist&limit=1`, {\n        method: 'GET',\n        headers: { \n\t\t\t\t  'Content-Type': 'application/json',\n          'Accept': 'application/json',          \n          'Authorization': 'Bearer ' + token \n        }  \n      });\n      const spotifyData = await artistResult.json()\n      const spotifyArtistId = spotifyData.artists.items[0].id     \n      this.spotifyEmbedUrl = `https://open.spotify.com/embed/artist/${spotifyArtistId}`\n    }\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module"}