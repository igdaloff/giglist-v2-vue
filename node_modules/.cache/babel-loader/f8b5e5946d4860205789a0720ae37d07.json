{"ast":null,"code":"import _regeneratorRuntime from \"/Users/nathan/Sites/giglist-v2-vue/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/nathan/Sites/giglist-v2-vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/web.btoa.js\";\nimport \"core-js/modules/web.dom-exception.constructor.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/web.dom-exception.to-string-tag.js\";\nimport cityData from \"../data/songkickCityData.js\";\nexport default {\n  data: function data() {\n    return {\n      selected: 7644,\n      cities: cityData,\n      songkickData: [],\n      randomGigVenue: '',\n      randomGigUrl: '',\n      randomGigDayOfWeek: '',\n      randomGigMonth: '',\n      randomGigDay: '',\n      randomGigArtist: '',\n      spotifyToken: '',\n      spotifyEmbedUrl: ''\n    };\n  },\n  mounted: function mounted() {\n    this.getSpotifyToken();\n    this.getCityData(this.selected);\n  },\n  methods: {\n    getCityData: function getCityData(defaultCityId, e) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var songkickCityId, songkickUrl, response, responseJSON;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Store city ID from selected <option> value in a variable; use defaultCityId on page load only\n                songkickCityId = defaultCityId ? _this.selected : e.target.value; // Using the getSongkickUrl method, generate a URL using the ID and date from above\n\n                songkickUrl = _this.getSongkickUrl(songkickCityId); // Fetch data from the URL generated above and extract it as a JSON object; Note: I'm using await/async instead of .then() chains, I think because it's cleaner and easier to read but not entirely sure\n\n                _context.next = 4;\n                return fetch(songkickUrl);\n\n              case 4:\n                response = _context.sent;\n                _context.next = 7;\n                return response.json();\n\n              case 7:\n                responseJSON = _context.sent;\n                // Store returned data in songkickData array defined above      \n                _this.songkickData = responseJSON;\n\n                _this.getRandomGigData();\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    getSongkickUrl: function getSongkickUrl(songkickCityId) {\n      var now = new Date();\n      var today = now.toISOString().slice(0, 10);\n      var songkickAPIKey = 'RpuYqxFiPPsJPs5l';\n      var songkickUrl = \"https://api.songkick.com/api/3.0/metro_areas/\".concat(songkickCityId, \"/calendar.json?min_date=\").concat(today, \"&apikey=\").concat(songkickAPIKey);\n      return songkickUrl;\n    },\n    getRandomGigData: function getRandomGigData() {\n      var listOfGigs = this.songkickData.resultsPage.results.event;\n      var randomGig = listOfGigs[Math.floor(Math.random() * listOfGigs.length)];\n      var randomGigDate = new Date(randomGig.start.datetime);\n      this.randomGigVenue = randomGig.venue.displayName;\n      this.randomGigUrl = randomGig.uri;\n      this.randomGigDayOfWeek = randomGigDate.toLocaleString('default', {\n        weekday: 'long'\n      });\n      this.randomGigMonth = randomGigDate.toLocaleString('default', {\n        month: 'long'\n      });\n      this.randomGigDay = randomGigDate.getDate();\n      this.randomGigArtist = randomGig.performance[0].artist.displayName;\n      this.getSpotifyEmbedUrl(this.spotifyToken, this.randomGigArtist);\n    },\n    // The first step in getting data from Spotify API is to do a POST request with our client ID and secret to get an access token in response (From this tutorial: https://www.youtube.com/watch?v=SbelQW2JaDQ)    \n    // The below private method returns a promise (as denoted by 'async'); we store the endpoint response in variable 'result'    \n    getSpotifyToken: function getSpotifyToken() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var clientId, clientSecret, result, data;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                clientId = '5478fc8855ee4fcaa624bbb2053924e9';\n                clientSecret = 'db24d93b5c434ce0a22680c6252f40ab';\n                _context2.next = 4;\n                return fetch('https://accounts.spotify.com/api/token', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'Authorization': 'Basic ' + btoa(clientId + ':' + clientSecret)\n                  },\n                  body: 'grant_type=client_credentials'\n                });\n\n              case 4:\n                result = _context2.sent;\n                _context2.next = 7;\n                return result.json();\n\n              case 7:\n                data = _context2.sent;\n                _this2.spotifyToken = data.access_token;\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    getSpotifyEmbedUrl: function getSpotifyEmbedUrl(token, artistName) {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var artistResult, spotifyData, spotifyArtistId;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return fetch(\"https://api.spotify.com/v1/search?q=\".concat(artistName, \"&type=artist&limit=1\"), {\n                  method: 'GET',\n                  headers: {\n                    'Authorization': 'Bearer ' + token\n                  }\n                });\n\n              case 2:\n                artistResult = _context3.sent;\n                _context3.next = 5;\n                return artistResult.json();\n\n              case 5:\n                spotifyData = _context3.sent;\n                spotifyArtistId = spotifyData.artists.items[0].id;\n                _this3.spotifyEmbedUrl = \"https://open.spotify.com/embed/artist/\".concat(spotifyArtistId);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["cityData","data","selected","cities","songkickData","randomGigVenue","randomGigUrl","randomGigDayOfWeek","randomGigMonth","randomGigDay","randomGigArtist","spotifyToken","spotifyEmbedUrl","mounted","getSpotifyToken","getCityData","methods","defaultCityId","e","songkickCityId","target","value","songkickUrl","getSongkickUrl","fetch","response","json","responseJSON","getRandomGigData","now","Date","today","toISOString","slice","songkickAPIKey","listOfGigs","resultsPage","results","event","randomGig","Math","floor","random","length","randomGigDate","start","datetime","venue","displayName","uri","toLocaleString","weekday","month","getDate","performance","artist","getSpotifyEmbedUrl","clientId","clientSecret","method","headers","btoa","body","result","access_token","token","artistName","artistResult","spotifyData","spotifyArtistId","artists","items","id"],"sourceRoot":"","sources":["/Users/nathan/Sites/giglist-v2-vue/src/components/CitySelect.vue"],"sourcesContent":["<template>\n  <select v-model=\"selected\" @change=\"getCityData\">\n    <option v-for=\"city in cities\" :key=\"city.id\" :value=\"city.id\">{{ city.label }}</option>\n  </select>\n  <p>{{ randomGigVenue }}</p>\n  <p>{{ randomGigUrl }}</p>\n  <p>{{ randomGigDayOfWeek }}</p>\n  <p>{{ randomGigMonth }}</p>\n  <p>{{ randomGigDay }}</p>\n  <p>{{ randomGigArtist }}</p>\n\n  <iframe :src=\"spotifyEmbedUrl\" v-if=\"spotifyEmbedUrl\" frameborder=\"0\" width=\"100%\" height=\"80\" frameBorder=\"0\"\n    allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\n</template>\n\n<script>\n\nimport cityData from \"../data/songkickCityData.js\"\n\nexport default {\n  data() {\n    return {\n      selected: 7644,\n      cities: cityData,\n      songkickData: [],      \n      randomGigVenue: '',\n      randomGigUrl: '',\n      randomGigDayOfWeek: '',\n      randomGigMonth: '',\n      randomGigDay: '',\n      randomGigArtist: '',\n      spotifyToken: '',\n      spotifyEmbedUrl: '',\n    }\n  },\n  mounted(){\n    this.getSpotifyToken()\n    this.getCityData(this.selected)    \n  },  \n  methods: {\n    async getCityData(defaultCityId, e) {\n\n      // Store city ID from selected <option> value in a variable; use defaultCityId on page load only\n      const songkickCityId = defaultCityId ? this.selected : e.target.value\n\n      // Using the getSongkickUrl method, generate a URL using the ID and date from above\n      let songkickUrl = this.getSongkickUrl(songkickCityId)      \n\n      // Fetch data from the URL generated above and extract it as a JSON object; Note: I'm using await/async instead of .then() chains, I think because it's cleaner and easier to read but not entirely sure\n      const response = await fetch(songkickUrl)\n      const responseJSON = await response.json()\n\n      // Store returned data in songkickData array defined above      \n      this.songkickData = responseJSON\n              \n      this.getRandomGigData()\n    },\n    getSongkickUrl(songkickCityId) {\n      const now = new Date()\n      const today = now.toISOString().slice(0, 10)\n      const songkickAPIKey = 'RpuYqxFiPPsJPs5l'\n      let songkickUrl = `https://api.songkick.com/api/3.0/metro_areas/${songkickCityId}/calendar.json?min_date=${today}&apikey=${songkickAPIKey}`;\n      \n      return songkickUrl\n    },\n    getRandomGigData() {      \n      const listOfGigs = this.songkickData.resultsPage.results.event\n      const randomGig = listOfGigs[Math.floor(Math.random()*listOfGigs.length)];\n      const randomGigDate = new Date(randomGig.start.datetime);\n      this.randomGigVenue = randomGig.venue.displayName;\n      this.randomGigUrl = randomGig.uri;      \n      this.randomGigDayOfWeek = randomGigDate.toLocaleString('default', { weekday: 'long' });\n      this.randomGigMonth = randomGigDate.toLocaleString('default', { month: 'long' });\n      this.randomGigDay = randomGigDate.getDate();\n      this.randomGigArtist = randomGig.performance[0].artist.displayName;      \n      \n      this.getSpotifyEmbedUrl(this.spotifyToken, this.randomGigArtist)\n    },\n\n    // The first step in getting data from Spotify API is to do a POST request with our client ID and secret to get an access token in response (From this tutorial: https://www.youtube.com/watch?v=SbelQW2JaDQ)    \n    // The below private method returns a promise (as denoted by 'async'); we store the endpoint response in variable 'result'    \n    async getSpotifyToken() {    \n      const clientId = '5478fc8855ee4fcaa624bbb2053924e9'\n      const clientSecret = 'db24d93b5c434ce0a22680c6252f40ab'\n      const result = await fetch('https://accounts.spotify.com/api/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': 'Basic ' + btoa(clientId + ':' + clientSecret)\n        },\n        body: 'grant_type=client_credentials'\n      });\n\n      // We await the json result from above and store it in variable 'data' and specifically return the access_token from the json data\n      // We'll use this token to call Spotify API endpoint below\n      const data = await result.json()\n      this.spotifyToken = data.access_token;       \n    },\n    async getSpotifyEmbedUrl(token, artistName) {\n      const artistResult = await fetch(`https://api.spotify.com/v1/search?q=${artistName}&type=artist&limit=1`, {\n        method: 'GET',\n        headers: { 'Authorization' : 'Bearer ' + token }\n      })\n      \n      const spotifyData = await artistResult.json()\n      const spotifyArtistId = spotifyData.artists.items[0].id     \n      this.spotifyEmbedUrl = `https://open.spotify.com/embed/artist/${spotifyArtistId}`\n    }\n  },\n}\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module"}