{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport cityData from \"../data/songkickCityData.js\";\nexport default {\n  data() {\n    return {\n      selected: 7644,\n      cities: cityData,\n      songkickData: [],\n      randomGigVenue: '',\n      randomGigUrl: '',\n      randomGigDayOfWeek: '',\n      randomGigMonth: '',\n      randomGigDay: '',\n      randomGigArtist: ''\n    };\n  },\n\n  methods: {\n    async getCityData(e) {\n      // Store city ID from selected <option> value in a variable\n      const songkickCityId = e.target.value; // Using the getSongkickUrl method, generate a URL using the ID and date from above\n\n      let songkickUrl = this.getSongkickUrl(songkickCityId); // Fetch data from the URL generated above and extract it as a JSON object; Note: I'm using await/async instead of .then() chains, I think because it's cleaner and easier to read but not entirely sure\n\n      const response = await fetch(songkickUrl);\n      const responseJSON = await response.json(); // Store returned data in songkickData array defined above      \n\n      this.songkickData = responseJSON;\n      this.getRandomGigData();\n    },\n\n    getSongkickUrl(songkickCityId) {\n      const now = new Date();\n      const today = now.toISOString().slice(0, 10);\n      const songkickAPIKey = 'RpuYqxFiPPsJPs5l';\n      let songkickUrl = `https://api.songkick.com/api/3.0/metro_areas/${songkickCityId}/calendar.json?min_date=${today}&apikey=${songkickAPIKey}`;\n      return songkickUrl;\n    },\n\n    getRandomGigData() {\n      const listOfGigs = this.songkickData.resultsPage.results.event;\n      const randomGig = listOfGigs[Math.floor(Math.random() * listOfGigs.length)];\n      const randomGigDate = new Date(randomGig.start.datetime);\n      this.randomGigVenue = randomGig.venue.displayName;\n      this.randomGigUrl = randomGig.uri;\n      this.randomGigDayOfWeek = randomGigDate.toLocaleString('default', {\n        weekday: 'long'\n      });\n      this.randomGigMonth = randomGigDate.toLocaleString('default', {\n        month: 'long'\n      });\n      this.randomGigDay = randomGigDate.getDate();\n      this.randomGigArtist = randomGig.performance[0].artist.displayName;\n    },\n\n    // The first step in getting data from Spotify API is to do a POST request with our client ID and secret to get an access token in response (From this tutorial: https://www.youtube.com/watch?v=SbelQW2JaDQ)    \n    // The below private method returns a promise (as denoted by 'async'); we store the endpoint response in variable 'result'    \n    async getSpotifyToken() {\n      const clientId = '471048b4fff14c79b12b08abb6dae22e';\n      const clientSecret = 'd8b25c87a3e248beb461a94b48f5905f';\n      const result = await fetch('https://accounts.spotify.com/api/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': 'Basic ' + btoa(clientId + ':' + clientSecret)\n        },\n        body: 'grant_type=client_credentials'\n      }); // We await the json result from above and store it in variable 'data' and specifically return the access_token from the json data\n      // We can use this token to call Spotify API endpoint\n\n      const data = await result.json();\n      return data.access_token;\n    }\n\n  },\n\n  beforeMount() {\n    this.getSpotifyToken();\n  }\n\n};","map":{"version":3,"mappings":"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","names":["cityData","data","selected","cities","songkickData","randomGigVenue","randomGigUrl","randomGigDayOfWeek","randomGigMonth","randomGigDay","randomGigArtist","methods","getCityData","e","songkickCityId","target","value","songkickUrl","getSongkickUrl","response","fetch","responseJSON","json","getRandomGigData","now","Date","today","toISOString","slice","songkickAPIKey","listOfGigs","resultsPage","results","event","randomGig","Math","floor","random","length","randomGigDate","start","datetime","venue","displayName","uri","toLocaleString","weekday","month","getDate","performance","artist","getSpotifyToken","clientId","clientSecret","result","method","headers","btoa","body","access_token","beforeMount"],"sourceRoot":"","sources":["/Users/nathan/Sites/giglist-v2-vue/src/components/CitySelect.vue"],"sourcesContent":["<template>\n  <select v-model=\"selected\" @change=\"getCityData\">\n    <option v-for=\"city in cities\" :key=\"city.id\" :value=\"city.id\">{{ city.label }}</option>\n  </select>\n  <p>{{ randomGigVenue }}</p>\n  <p>{{ randomGigUrl }}</p>\n  <p>{{ randomGigDayOfWeek }}</p>\n  <p>{{ randomGigMonth }}</p>\n  <p>{{ randomGigDay }}</p>\n  <p>{{ randomGigArtist }}</p>\n</template>\n\n<script>\n\nimport cityData from \"../data/songkickCityData.js\"\n\nexport default {\n  data() {\n    return {\n      selected: 7644,\n      cities: cityData,\n      songkickData: [],\n      randomGigVenue: '',\n      randomGigUrl: '',\n      randomGigDayOfWeek: '',\n      randomGigMonth: '',\n      randomGigDay: '',\n      randomGigArtist: ''\n    }\n  },\n  methods: {\n    async getCityData(e) {\n\n      // Store city ID from selected <option> value in a variable\n      const songkickCityId = e.target.value\n\n      // Using the getSongkickUrl method, generate a URL using the ID and date from above\n      let songkickUrl = this.getSongkickUrl(songkickCityId)      \n\n      // Fetch data from the URL generated above and extract it as a JSON object; Note: I'm using await/async instead of .then() chains, I think because it's cleaner and easier to read but not entirely sure\n      const response = await fetch(songkickUrl)\n      const responseJSON = await response.json()\n\n      // Store returned data in songkickData array defined above      \n      this.songkickData = responseJSON\n              \n      this.getRandomGigData()\n    },\n    getSongkickUrl(songkickCityId) {\n      const now = new Date()\n      const today = now.toISOString().slice(0, 10)\n      const songkickAPIKey = 'RpuYqxFiPPsJPs5l'\n      let songkickUrl = `https://api.songkick.com/api/3.0/metro_areas/${songkickCityId}/calendar.json?min_date=${today}&apikey=${songkickAPIKey}`;\n      \n      return songkickUrl\n    },\n    getRandomGigData() {      \n      const listOfGigs = this.songkickData.resultsPage.results.event\n      const randomGig = listOfGigs[Math.floor(Math.random()*listOfGigs.length)];\n      const randomGigDate = new Date(randomGig.start.datetime);\n      this.randomGigVenue = randomGig.venue.displayName;\n      this.randomGigUrl = randomGig.uri;      \n      this.randomGigDayOfWeek = randomGigDate.toLocaleString('default', { weekday: 'long' });\n      this.randomGigMonth = randomGigDate.toLocaleString('default', { month: 'long' });\n      this.randomGigDay = randomGigDate.getDate();\n      this.randomGigArtist = randomGig.performance[0].artist.displayName;            \n    },\n\n    // The first step in getting data from Spotify API is to do a POST request with our client ID and secret to get an access token in response (From this tutorial: https://www.youtube.com/watch?v=SbelQW2JaDQ)    \n    // The below private method returns a promise (as denoted by 'async'); we store the endpoint response in variable 'result'    \n    async getSpotifyToken () {    \n      const clientId = '471048b4fff14c79b12b08abb6dae22e'\n      const clientSecret = 'd8b25c87a3e248beb461a94b48f5905f'\n      const result = await fetch('https://accounts.spotify.com/api/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': 'Basic ' + btoa(clientId + ':' + clientSecret)\n        },\n        body: 'grant_type=client_credentials'\n      });\n\n      // We await the json result from above and store it in variable 'data' and specifically return the access_token from the json data\n      // We can use this token to call Spotify API endpoint\n      const data = await result.json();          \n      return data.access_token;      \n    }\n  },\n  beforeMount(){\n    this.getSpotifyToken()    \n  }\n}\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module"}